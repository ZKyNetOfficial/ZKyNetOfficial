# Haraka + usr-support Integration Guide

## Architecture Overview

This guide details integrating Haraka email server with the existing usr-support backend to enable:
1. **Contact form functionality** (immediate need)
2. **Mass email capabilities** (future-ready architecture)

### Integration Approach
- **Multi-service Docker setup**: Haraka + usr-support in shared network
- **Shared resources**: Email templates and configuration via Docker volumes
- **API-driven**: Backend sends emails via SMTP to Haraka
- **Modular design**: Services remain independently updatable

## Current State Analysis

### Existing usr-support Backend
- **Service**: FastAPI on port 8080
- **Network**: `user-support-network` (bridge)
- **Data**: JSON file storage (`support_emails.json`, `node_emails.json`)
- **Endpoints**: `/api/support`, `/api/node-operator`, `/api/stats`, `/api/health`
- **Features**: Email validation, rate limiting, CORS, health checks

### Requirements
- **Contact page**: Currently placeholder, needs backend integration
- **Email delivery**: Contact form submissions → contact@zkynet.org
- **Future**: Mass email campaigns to collected email lists

## Multi-Service Docker Setup

### Updated docker-compose.yml Structure
```yaml
version: '3.8'

services:
  user-support-api:
    build: .
    container_name: user-support-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./volumes/user_data:/app/data
      - ./volumes/shared:/app/shared  # New: shared templates/config
    environment:
      - PORT=8080
      - PYTHONUNBUFFERED=1
      - HARAKA_HOST=haraka-server  # New: Haraka connection
      - HARAKA_PORT=587
    networks:
      - shared-email-network  # Updated network name
    depends_on:
      - haraka-server

  haraka-server:
    image: haraka/haraka:latest
    container_name: haraka-server
    restart: unless-stopped
    ports:
      - "587:587"  # Internal SMTP
      - "25:25"     # External SMTP (if needed)
    volumes:
      - ./volumes/haraka-config:/Haraka/config
      - ./volumes/haraka-plugins:/Haraka/plugins
      - ./volumes/shared:/app/shared  # Shared templates/config
    environment:
      - HARAKA_USER=haraka
      - TZ=UTC
    networks:
      - shared-email-network

networks:
  shared-email-network:
    driver: bridge

volumes:
  user_data:
  haraka_config:
  haraka_plugins:
  shared:
```

## Backend Extensions (usr-support)

### New Dependencies (requirements.txt additions)
```
aiosmtplib==3.0.1  # Async SMTP client
jinja2==3.1.4      # Email template engine
```

### New Models (models.py additions)
```python
class ContactRequest(BaseModel):
    name: str = Field(..., min_length=1, max_length=100)
    email: EmailStr = Field(...)
    subject: str = Field(..., min_length=1, max_length=200)
    message: str = Field(..., min_length=10, max_length=2000)
    
class BulkEmailRequest(BaseModel):
    template: str = Field(...)
    recipients: List[EmailStr] = Field(..., max_items=1000)
    subject: str = Field(...)
    variables: Dict[str, Any] = Field(default_factory=dict)
```

### New Services (services.py additions)
```python
class SMTPService:
    """SMTP client for sending emails via Haraka"""
    
    async def send_contact_email(self, contact_data: ContactRequest) -> Dict[str, Any]:
        # Format and send contact form email to contact@zkynet.org
        pass
    
    async def send_bulk_email(self, bulk_data: BulkEmailRequest) -> Dict[str, Any]:
        # Send mass emails via Haraka SMTP
        pass

class TemplateService:
    """Email template management"""
    
    def render_contact_template(self, contact_data: ContactRequest) -> str:
        # Render contact form email template
        pass
    
    def render_bulk_template(self, template: str, variables: Dict) -> str:
        # Render mass email template with variables
        pass
```

### New Endpoints (main.py additions)
```python
@app.post("/api/contact", status_code=status.HTTP_201_CREATED)
@limiter.limit("10/minute")
async def contact_form(request: Request, contact_data: ContactRequest):
    # Handle contact form submissions
    pass

@app.post("/api/send-bulk", status_code=status.HTTP_202_ACCEPTED)
@limiter.limit("1/minute")  # Strict rate limiting for bulk operations
async def send_bulk_email(request: Request, bulk_data: BulkEmailRequest):
    # Handle mass email sending (future feature)
    pass
```

## Haraka Configuration

### Required Directory Structure
```
volumes/
├── haraka-config/
│   ├── plugins          # Plugin loading order
│   ├── smtp.ini         # SMTP server configuration
│   ├── dkim.ini         # DKIM signing configuration
│   ├── dkim/            # DKIM private keys
│   └── hosts            # Allowed hosts
├── haraka-plugins/
│   └── custom-integration.js  # Custom plugin for usr-support
└── shared/
    └── templates/
        ├── contact.html     # Contact form email template
        └── newsletter.html  # Mass email template
```

### Essential Configuration Files

#### haraka-config/plugins
```
# Core plugins
tls
# Custom integration
custom-integration
# DKIM signing
dkim_sign
# Bounce handling
bounce
# Queue management
queue/discard
```

#### haraka-config/smtp.ini
```ini
[smtp]
port=587
listen=[::]:587,0.0.0.0:587

[relay]
host=localhost
port=25
```

#### haraka-config/dkim.ini
```ini
[dkim]
disabled=false
headers_to_sign=From,To,Subject,Date,Message-ID
```

### Custom Haraka Plugin (haraka-plugins/custom-integration.js)
```javascript
// Plugin to handle usr-support integration
const Plugin = require('haraka-plugin-base');

class CustomIntegrationPlugin extends Plugin {
    constructor() {
        super();
    }
    
    register() {
        this.register_hook('queue', 'queue_email');
        this.register_hook('bounce', 'handle_bounce');
    }
    
    queue_email(next, connection) {
        // Handle email queueing from usr-support
        this.loginfo('Email queued from usr-support backend');
        next();
    }
    
    handle_bounce(next, hmail) {
        // Log bounces back to usr-support
        this.loginfo('Bounce detected, logging to usr-support');
        next();
    }
}

module.exports = CustomIntegrationPlugin;
```

## Implementation Phases

### Phase 1: Basic Contact Form Integration (Immediate)

#### Step 1: Update Docker Configuration
1. Modify `docker-compose.yml` with Haraka service
2. Create required volume directories
3. Add Haraka configuration files

#### Step 2: Extend usr-support Backend
1. Add SMTP dependencies to `requirements.txt`
2. Create `SMTPService` and `TemplateService` classes
3. Add `/api/contact` endpoint
4. Create contact form email template

#### Step 3: Deploy and Test
1. `docker-compose up -d --build`
2. Test contact form: form → backend → Haraka → contact@zkynet.org
3. Verify email delivery and formatting

### Phase 2: Enhanced Integration

#### Step 1: Advanced Haraka Configuration
1. Configure DKIM signing for deliverability
2. Set up bounce handling and logging
3. Add custom plugin for usr-support integration

#### Step 2: Monitoring and Logging
1. Centralized logging for both services
2. Health checks for Haraka service
3. Email delivery tracking

#### Step 3: Production Hardening
1. SSL/TLS configuration
2. SPF/DMARC DNS records
3. Rate limiting and security headers

### Phase 3: Mass Email Capabilities (Future)

#### Step 1: Bulk Email Infrastructure
1. Add `/api/send-bulk` endpoint
2. Implement queue management
3. Create email template system

#### Step 2: Campaign Management
1. Email list management from JSON data
2. Unsubscribe link generation
3. Campaign tracking and analytics

#### Step 3: Compliance and Deliverability
1. Bounce and complaint handling
2. Email reputation monitoring
3. Subscription management

## File Structure After Implementation

```
/home/acer/Workspace/VPN/Backend/Usr-support/
├── app/
│   ├── __init__.py
│   ├── main.py              # Updated with contact endpoints
│   ├── models.py            # Updated with contact models
│   ├── services.py          # Updated with SMTP/Template services
│   ├── utils.py
│   └── validators.py
├── volumes/
│   ├── user_data/
│   │   ├── support_emails.json
│   │   └── node_emails.json
│   ├── haraka-config/
│   │   ├── plugins
│   │   ├── smtp.ini
│   │   ├── dkim.ini
│   │   └── dkim/
│   ├── haraka-plugins/
│   │   └── custom-integration.js
│   └── shared/
│       └── templates/
│           ├── contact.html
│           └── newsletter.html
├── docker-compose.yml       # Updated with Haraka service
├── Dockerfile
├── requirements.txt         # Updated with SMTP dependencies
└── README.md
```

## Testing Strategy

### Unit Tests
1. Contact form validation
2. Email template rendering
3. SMTP connection handling

### Integration Tests
1. End-to-end email flow
2. Haraka plugin functionality
3. Error handling and recovery

### Production Readiness
1. Load testing for bulk emails
2. Deliverability testing
3. Security penetration testing

## Deployment Considerations

### DNS Configuration
```
# SPF record
TXT "v=spf1 ip4:YOUR_SERVER_IP ~all"

# DKIM record (generated by Haraka)
TXT "dkim._domainkey" "v=DKIM1; k=rsa; p=YOUR_PUBLIC_KEY"

# DMARC record
TXT "_dmarc" "v=DMARC1; p=quarantine; rua=mailto:dmarc@zkynet.org"
```

### Security
- Firewall configuration for SMTP ports
- SSL certificate for email encryption
- Rate limiting and DDoS protection
- Regular security updates

### Monitoring
- Email delivery rates
- Bounce and complaint rates
- Service health and performance
- Resource usage (CPU, memory, disk)

## Next Steps for Implementation
1. **Create Haraka configuration files**
2. **Update docker-compose.yml**
3. **Extend usr-support backend with contact functionality**
4. **Deploy and test basic email flow**
5. **Configure DNS and deliverability settings**
6. **Create contact form HTML page**
7. **Implement monitoring and logging**